name: CI & Deploy to Infomaniak
on:
    push:
        branches: ["main"]
jobs:
    build-deploy:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup environment for build
              run: |
                  echo "APP_ENV=test" > .env.test.local
                  echo "DATABASE_URL=sqlite:///:memory:" >> .env.test.local
                  echo "APP_SECRET=test" >> .env.test.local

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: "8.2"
                  extensions: mbstring, intl, pdo_mysql, opcache
                  coverage: none

            - name: Install dependencies
              run: composer install --no-interaction --prefer-dist --no-scripts

            - name: Prepare production build
              run: composer install --no-dev --prefer-dist --no-interaction --optimize-autoloader --no-scripts

            - name: Create release archive
              run: |
                  echo "üì¶ Cr√©ation de l'archive de d√©ploiement..."
                  mkdir build
                  tar -czf build/release.tar.gz \
                    --exclude='./.git' \
                    --exclude='./.github' \
                    --exclude='./tests' \
                    --exclude='./var' \
                    --exclude='./.env.test*' \
                    --exclude='./phpunit.xml*' \
                    --exclude='./node_modules' \
                    --exclude='./build' \
                    .
                  mv build/release.tar.gz .
                  echo "‚úÖ Archive cr√©√©e: release.tar.gz"

            - name: Add host key
              run: |
                  mkdir -p ~/.ssh
                  ssh-keyscan -p "${{ secrets.SSH_PORT }}" "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts

            - name: Upload archive to server
              uses: appleboy/scp-action@v0.1.7
              with:
                  host: ${{ secrets.SSH_HOST }}
                  username: ${{ secrets.SSH_USER }}
                  key: ${{ secrets.SSH_KEY }}
                  port: ${{ secrets.SSH_PORT }}
                  passphrase: ${{ secrets.SSH_PASSPHRASE }}
                  source: "release.tar.gz"
                  target: "~/"

            - name: Deploy to Infomaniak
              uses: appleboy/ssh-action@v1.2.0
              with:
                  host: ${{ secrets.SSH_HOST }}
                  username: ${{ secrets.SSH_USER }}
                  key: ${{ secrets.SSH_KEY }}
                  port: ${{ secrets.SSH_PORT }}
                  passphrase: ${{ secrets.SSH_PASSPHRASE }}
                  script: |
                      set -euo pipefail

                      # --- Configuration ---
                      PHP_CMD="/opt/php8.2/bin/php"
                      COMPOSER_CMD="/opt/php8.2/bin/composer"
                      WEB_DIR="sites/apimemoire"

                      echo "üöÄ D√©but du d√©ploiement Infomaniak..."

                      # 1. Sauvegarde de s√©curit√© du site complet
                      if [ -d "$WEB_DIR" ] && [ "$(ls -A $WEB_DIR 2>/dev/null)" ]; then
                          echo "üíæ Sauvegarde de l'existant..."
                          BACKUP_NAME="backup_$(date +%Y%m%d_%H%M%S).tar.gz"
                          tar -czf "$BACKUP_NAME" -C "$WEB_DIR" . --exclude="var/cache/*" --exclude="var/log/*" || true
                          echo "‚úÖ Sauvegarde cr√©√©e: $BACKUP_NAME"
                      fi

                      mkdir -p "$WEB_DIR"

                      # 2. Sauvegarde des donn√©es persistantes
                      echo "üíæ Sauvegarde des donn√©es persistantes..."
                      if [ -f "$WEB_DIR/.env.local" ]; then cp "$WEB_DIR/.env.local" "/tmp/env_backup" || true; fi
                      if [ -d "$WEB_DIR/var" ]; then cp -r "$WEB_DIR/var" "/tmp/var_backup" || true; fi
                      if [ -d "$WEB_DIR/public/uploads" ]; then cp -r "$WEB_DIR/public/uploads" "/tmp/uploads_backup" || true; fi
                      if [ -d "$WEB_DIR/config/jwt" ]; then cp -r "$WEB_DIR/config/jwt" "/tmp/jwt_backup" || true; fi

                      # 3. Nettoyage du r√©pertoire
                      echo "üßπ Nettoyage du r√©pertoire web..."
                      cd "$WEB_DIR"
                      find . -mindepth 1 -maxdepth 1 ! -name 'var' ! -name 'public' ! -name 'config' -exec rm -rf {} + 2>/dev/null || true
                      if [ -d "public" ]; then find public -mindepth 1 -maxdepth 1 ! -name 'uploads' -exec rm -rf {} + 2>/dev/null || true; fi
                      if [ -d "config" ]; then find config -mindepth 1 -maxdepth 1 ! -name 'jwt' -exec rm -rf {} + 2>/dev/null || true; fi

                      # 4. D√©ploiement du nouveau code
                      echo "üì¶ Extraction de la nouvelle version..."
                      tar -xzf "$HOME/release.tar.gz"

                      # 5. Restauration des donn√©es persistantes
                      echo "üîÑ Restauration des donn√©es persistantes..."
                      if [ -f "/tmp/env_backup" ]; then cp "/tmp/env_backup" ".env.local"; fi
                      if [ -d "/tmp/var_backup" ]; then cp -r /tmp/var_backup/* var/ 2>/dev/null || true; fi
                      if [ -d "/tmp/uploads_backup" ]; then cp -r /tmp/uploads_backup/* public/uploads/ 2>/dev/null || true; fi
                      if [ -d "/tmp/jwt_backup" ]; then mkdir -p config/jwt && cp -r /tmp/jwt_backup/* config/jwt/ 2>/dev/null || true; fi

                      # 6. Installation et configuration
                      echo "üì¶ Installation des d√©pendances..."
                      $COMPOSER_CMD install --no-dev --prefer-dist --no-interaction --optimize-autoloader --no-scripts

                      echo "üñºÔ∏è Installation des assets..."
                      $PHP_CMD bin/console assets:install --env=prod

                      if [ -f bin/console ]; then
                          echo "‚öôÔ∏è Configuration Symfony..."
                          $PHP_CMD bin/console cache:clear --env=prod
                          $PHP_CMD bin/console doctrine:migrations:migrate --env=prod --no-interaction --allow-no-migration || echo "‚ö†Ô∏è Migrations non appliqu√©es"
                          $PHP_CMD bin/console cache:warmup --env=prod || true
                          $PHP_CMD bin/console api:openapi:export --yaml --env=prod > public/api-docs.yaml 2>/dev/null || echo "üìö Documentation API non g√©n√©r√©e"
                      fi

                      # 7. Finalisation
                      echo "üîê Configuration des permissions..."
                      chmod -R 755 .
                      chmod -R 777 var 2>/dev/null || chmod -R 755 var

                      echo "üßπ Nettoyage final..."
                      rm -f "$HOME/release.tar.gz"
                      rm -rf /tmp/env_backup /tmp/var_backup /tmp/uploads_backup /tmp/jwt_backup 2>/dev/null || true

                      echo "‚úÖ D√©ploiement Infomaniak termin√© avec succ√®s!"
