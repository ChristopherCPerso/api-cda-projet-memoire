name: CI & Deploy to Infomaniak
on:
    push:
        branches: ["main"]
jobs:
    build-deploy:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup environment
              run: |
                  echo "APP_ENV=test" > .env.test.local
                  echo "DATABASE_URL=sqlite:///:memory:" >> .env.test.local
                  echo "APP_SECRET=test" >> .env.test.local

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: "8.2"
                  extensions: mbstring, intl, pdo_mysql, opcache
                  coverage: none

            - name: Install dependencies
              run: |
                  echo "üì¶ Installation des d√©pendances..."
                  composer install --no-interaction --prefer-dist --no-scripts
                  echo "‚úÖ D√©pendances install√©es"

            - name: Prepare production build
              run: |
                  echo "üèóÔ∏è Pr√©paration du build production..."
                  composer install --no-dev --prefer-dist --no-interaction --optimize-autoloader --no-scripts
                  echo "‚úÖ Build production pr√™t"

            # --- MODIFICATION 1 ---
            - name: Create release archive
              run: |
                  echo "üì¶ Cr√©ation de l'archive de d√©ploiement..."
                  # Cr√©e l'archive dans un chemin absolu (/tmp) pour √©viter les probl√®mes de chemins relatifs
                  tar -czf /tmp/release.tar.gz \
                    --exclude='.git' \
                    --exclude='.github' \
                    --exclude='tests' \
                    --exclude='var/cache/*' \
                    --exclude='var/log/*' \
                    --exclude='.env.test*' \
                    --exclude='phpunit.xml*' \
                    --exclude='node_modules' \
                    .
                  echo "‚úÖ Archive cr√©√©e: /tmp/release.tar.gz"

            - name: Add host key
              run: |
                  mkdir -p ~/.ssh
                  ssh-keyscan -p "${{ secrets.SSH_PORT }}" "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts

            # --- MODIFICATION 2 ---
            - name: Upload archive to server
              uses: appleboy/scp-action@v0.1.7
              with:
                  host: ${{ secrets.SSH_HOST }}
                  username: ${{ secrets.SSH_USER }}
                  key: ${{ secrets.SSH_KEY }}
                  port: ${{ secrets.SSH_PORT }}
                  # Le chemin source est mis √† jour pour pointer vers le chemin absolu de l'archive
                  source: "/tmp/release.tar.gz"
                  target: "~/deploy"

            - name: Deploy on server (extract, link, composer, migrate)
              uses: appleboy/ssh-action@v1.2.0
              with:
                  host: ${{ secrets.SSH_HOST }}
                  username: ${{ secrets.SSH_USER }}
                  key: ${{ secrets.SSH_KEY }}
                  port: ${{ secrets.SSH_PORT }}
                  script: |
                      set -euo pipefail
                      DEPLOY_PATH=${{ secrets.DEPLOY_PATH }}
                      RELEASES="$DEPLOY_PATH/releases"
                      SHARED="$DEPLOY_PATH/shared"
                      TS=$(date +%Y%m%d%H%M%S)

                      echo "üöÄ D√©but du d√©ploiement..."
                      mkdir -p "$RELEASES/$TS"
                      tar -xzf "$HOME/deploy/release.tar.gz" -C "$RELEASES/$TS"
                      cd "$RELEASES/$TS"

                      # Symlinks vers le shared (persistant)
                      ln -sfn "$SHARED/.env.local" .env.local || true
                      mkdir -p "$SHARED/var" "$SHARED/public/uploads"
                      rm -rf var public/uploads
                      ln -sfn "$SHARED/var" var
                      ln -sfn "$SHARED/public/uploads" public/uploads

                      # D√©pendances c√¥t√© serveur (avec la vraie DB)
                      echo "üì¶ Installation d√©pendances production..."
                      composer install --no-dev --prefer-dist --no-interaction --optimize-autoloader

                      # Migrations DB (maintenant qu'on a la vraie config)
                      if [ -f bin/console ]; then
                        echo "üóÑÔ∏è Migration base de donn√©es..."
                        php bin/console doctrine:migrations:migrate --no-interaction --allow-no-migration
                        
                        echo "‚ö° Optimisation cache..."
                        php bin/console cache:clear --env=prod --no-warmup
                        php bin/console cache:warmup --env=prod
                        
                        # API Platform - g√©n√©ration doc
                        echo "üìö G√©n√©ration documentation API..."
                        php bin/console api:openapi:export --yaml > public/api-docs.yaml || echo "Pas de doc g√©n√©r√©e"
                      fi

                      # Bascule atomique
                      echo "üîÑ Bascule vers nouvelle version..."
                      ln -sfn "$RELEASES/$TS" "$DEPLOY_PATH/current"

                      # Droits d'√©criture
                      chmod -R u+rwX,g+rwX var || true

                      echo "‚úÖ D√©ploiement termin√© avec succ√®s!"

                      # Health check optionnel
                      sleep 2
                      echo "üè• Test de sant√© de l'API..."
                      # curl -f https://ton-domaine.com/api || echo "‚ö†Ô∏è Health check √† v√©rifier manuellement"
