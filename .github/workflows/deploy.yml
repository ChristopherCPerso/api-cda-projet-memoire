name: CI & Deploy to Infomaniak
on:
    push:
        branches: ["main"]
jobs:
    build-test-deploy:
        runs-on: ubuntu-latest

        # Ajout des services MySQL pour les tests
        services:
            mysql:
                image: mysql:8.0
                env:
                    MYSQL_ROOT_PASSWORD: root
                    MYSQL_DATABASE: symfony_test
                ports:
                    - 3306:3306
                options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            # Configuration d'environnement pour √©viter la connexion DB
            - name: Setup environment
              run: |
                  # Cr√©er un .env.test temporaire pour √©viter la connexion DB
                  echo "APP_ENV=test" > .env.test.local
                  echo "DATABASE_URL=sqlite:///:memory:" >> .env.test.local
                  echo "APP_SECRET=test" >> .env.test.local

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: "8.2"
                  extensions: mbstring, intl, pdo_mysql, pdo_sqlite, opcache
                  coverage: none

            # Installation avec variable d'environnement pour √©viter les scripts Symfony
            - name: Install deps (dev) WITHOUT auto-scripts
              run: |
                  composer install --no-interaction --prefer-dist --no-scripts

            # Puis on lance les scripts manuellement avec la bonne config
            - name: Setup database for tests
              run: |
                  echo "DATABASE_URL=mysql://root:root@127.0.0.1:3306/symfony_test" > .env.test.local
                  php bin/console doctrine:database:create --env=test --if-not-exists
                  php bin/console doctrine:schema:create --env=test
                  # Fixtures si tu en as
                  php bin/console doctrine:fixtures:load --env=test --no-interaction --quiet || echo "No fixtures"

            - name: Run tests
              run: |
                  if [ -f vendor/bin/phpunit ]; then 
                    vendor/bin/phpunit --testdox
                  else 
                    echo "No tests configured"
                  fi

            # Maintenant on pr√©pare pour la production (sans DB)
            - name: Prepare production vendor (no DB connection)
              run: |
                  # Supprimer la config de test
                  rm -f .env.test.local
                  # Installer en prod sans scripts automatiques
                  composer install --no-dev --prefer-dist --no-interaction --optimize-autoloader --no-scripts

            - name: Create release archive
              run: |
                  tar -czf release.tar.gz \
                    --exclude='.git' \
                    --exclude='.github' \
                    --exclude='tests' \
                    --exclude='var/cache/*' \
                    --exclude='var/log/*' \
                    --exclude='.env.test*' \
                    .

            - name: Add host key
              run: |
                  mkdir -p ~/.ssh
                  ssh-keyscan -p "${{ secrets.SSH_PORT }}" "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts

            - name: Upload archive to server
              uses: appleboy/scp-action@v0.1.7
              with:
                  host: ${{ secrets.SSH_HOST }}
                  username: ${{ secrets.SSH_USER }}
                  key: ${{ secrets.SSH_KEY }}
                  port: ${{ secrets.SSH_PORT }}
                  source: "release.tar.gz"
                  target: "~/deploy"

            - name: Deploy on server (extract, link, composer, migrate)
              uses: appleboy/ssh-action@v1.2.0
              with:
                  host: ${{ secrets.SSH_HOST }}
                  username: ${{ secrets.SSH_USER }}
                  key: ${{ secrets.SSH_KEY }}
                  port: ${{ secrets.SSH_PORT }}
                  script: |
                      set -euo pipefail
                      DEPLOY_PATH=${{ secrets.DEPLOY_PATH }}
                      RELEASES="$DEPLOY_PATH/releases"
                      SHARED="$DEPLOY_PATH/shared"
                      TS=$(date +%Y%m%d%H%M%S)

                      echo "üöÄ D√©but du d√©ploiement..."
                      mkdir -p "$RELEASES/$TS"
                      tar -xzf "$HOME/deploy/release.tar.gz" -C "$RELEASES/$TS"
                      cd "$RELEASES/$TS"

                      # Symlinks vers le shared (persistant)
                      ln -sfn "$SHARED/.env.local" .env.local || true
                      mkdir -p "$SHARED/var" "$SHARED/public/uploads"
                      rm -rf var public/uploads
                      ln -sfn "$SHARED/var" var
                      ln -sfn "$SHARED/public/uploads" public/uploads

                      # D√©pendances c√¥t√© serveur (avec la vraie DB)
                      echo "üì¶ Installation d√©pendances production..."
                      composer install --no-dev --prefer-dist --no-interaction --optimize-autoloader

                      # Migrations DB (maintenant qu'on a la vraie config)
                      if [ -f bin/console ]; then
                        echo "üóÑÔ∏è Migration base de donn√©es..."
                        php bin/console doctrine:migrations:migrate --no-interaction --allow-no-migration
                        
                        echo "‚ö° Optimisation cache..."
                        php bin/console cache:clear --env=prod --no-warmup
                        php bin/console cache:warmup --env=prod
                        
                        # API Platform - g√©n√©ration doc
                        echo "üìö G√©n√©ration documentation API..."
                        php bin/console api:openapi:export --yaml > public/api-docs.yaml || echo "Pas de doc g√©n√©r√©e"
                      fi

                      # Bascule atomique
                      echo "üîÑ Bascule vers nouvelle version..."
                      ln -sfn "$RELEASES/$TS" "$DEPLOY_PATH/current"

                      # Droits d'√©criture
                      chmod -R u+rwX,g+rwX var || true

                      echo "‚úÖ D√©ploiement termin√© avec succ√®s!"

                      # Health check optionnel
                      sleep 2
                      echo "üè• Test de sant√© de l'API..."
                      # curl -f https://ton-domaine.com/api || echo "‚ö†Ô∏è Health check √† v√©rifier manuellement"
